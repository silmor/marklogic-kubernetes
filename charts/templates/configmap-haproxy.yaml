{{- if .Values.haproxy.enabled }}
{{- $replicas := int .Values.replicaCount }}
{{- $releaseName := include "marklogic.fullname" . }}
{{- $namespace := .Release.Namespace }}
{{- $clusterDomain := .Values.clusterDomain }}
{{- $haproxyTlsEnabled := .Values.haproxy.tls.enabled }}
{{- $appServerTlsEnabled := .Values.tls.enableOnDefaultAppServers -}}
{{- $certFileName := .Values.haproxy.tls.certFileName }}

apiVersion: v1
kind: ConfigMap
metadata:
  name: marklogic-haproxy
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/component: haproxy
data:
  haproxy.cfg: |
    global
      log stdout format raw local0
      maxconn 1024

    defaults
      log global
      option forwardfor
      timeout client 60s
      timeout connect 60s
      timeout server 60s

    resolvers dns
      # add nameserver from /etc/resolv.conf
      parse-resolv-conf
      
      hold valid    10s

      # Maximum size of a DNS answer allowed, in bytes
      accepted_payload_size 8192


      # How long to "hold" a backend server's up/down status depending on the name resolution status.
      # For example, if an NXDOMAIN response is returned, keep the backend server in its current state (up) for
      # at least another 30 seconds before marking it as down due to DNS not having a record for it.
      hold valid    10s
      hold other    30s
      hold refused  30s
      hold nx       30s
      hold timeout  30s
      hold obsolete 30s

      # How many times to retry a query
      resolve_retries 3

      # How long to wait between retries when no valid response has been received
      timeout retry 5s

      # How long to wait for a successful resolution
      timeout resolve 5s

    {{- if .Values.haproxy.stats.enabled }}
    frontend stats
      mode http
      bind *:{{ .Values.haproxy.stats.port }}
      stats enable
      http-request use-service prometheus-exporter if { path /metrics }
      stats uri /
      {{- if .Values.haproxy.stats.auth.enabled }}
      stats auth {{ .Values.haproxy.stats.auth.username }}:{{ .Values.haproxy.stats.auth.password }}
      {{- end }}
      stats refresh 10s
      stats admin if LOCALHOST
    {{- end }}

    {{- range $_, $v := .Values.haproxy.ports }}
    {{ $portNumber := printf "%v" (default $v.port $v.targetPort) }}
    {{ $portType := upper (printf "%s" $v.type) }}

    {{- if eq $portType "TCP"  -}}
      listen marklogic-{{$portNumber}}
        bind :{{ $portNumber }}
        mode tcp
        balance leastconn
        {{- range $i := until $replicas }}
        server {{ printf "ml-%s-%s-%v" $releaseName $portNumber $i }} {{ $releaseName }}-{{ $i }}.{{ $releaseName }}.{{ $namespace }}.svc.{{ $clusterDomain }}:{{ $portNumber }} check resolvers dns init-addr none
        {{- end }}
    {{- else if eq $portType "HTTP" }}

    frontend marklogic-{{$portNumber}}
      mode http
      {{- if $haproxyTlsEnabled }}
      bind :{{ $portNumber }} ssl crt /usr/local/etc/ssl/{{ $certFileName }}
      {{- else }}
      bind :{{ $portNumber }}
      {{- end }}
      log-format "%ci:%cp [%tr] %ft %b/%s %TR/%Tw/%Tc/%Tr/%Ta %ST %B %CC %CS %tsc %ac/%fc/%bc/%sc/%rc %sq/%bq %hr %hs %{+Q}r"
      default_backend marklogic-{{$portNumber}}

    backend marklogic-{{$portNumber}}
      mode http
      balance leastconn
      option forwardfor
      cookie haproxy insert indirect nocache maxidle 30m maxlife 4h 
      stick-table type string len 32 size 10k expire 4h
      stick store-response res.cook(HostId)
      stick store-response res.cook(SessionId)
      stick match req.cook(HostId)
      stick match req.cook(SessionId)
      default-server check
      {{- range $i := until $replicas }}
      {{- if $appServerTlsEnabled }}
      server {{ printf "ml-%s-%s-%v" $releaseName $portNumber $i }} {{ $releaseName }}-{{ $i }}.{{ $releaseName }}.{{ $namespace }}.svc.{{ $clusterDomain }}:{{ $portNumber }} resolvers dns init-addr none cookie {{ $releaseName }}-{{ $portNumber }}-{{ $i }} ssl verify none
      {{- else }}
      server {{ printf "ml-%s-%s-%v" $releaseName $portNumber $i }} {{ $releaseName }}-{{ $i }}.{{ $releaseName }}.{{ $namespace }}.svc.{{ $clusterDomain }}:{{ $portNumber }} resolvers dns init-addr none cookie {{ $releaseName }}-{{ $portNumber }}-{{ $i }}
      {{- end }}
      {{- end }}
    {{- end }}
    {{- end }}

{{- end }}